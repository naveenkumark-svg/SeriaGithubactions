name: Deploy ERPNext with Custom Apps

on:
  push:
    branches: 
      - main
      - staging
      - develop
  pull_request:
    branches: 
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/erpnext
  KUBERNETES_VERSION: v1.28.0

jobs:
  # =============================================================================
  # Test Job
  # =============================================================================
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        pip install frappe-bench
        
    - name: Validate YAML files
      run: |
        # Install yamllint
        pip install yamllint
        
        # Validate all YAML files
        find k8s/ -name "*.yaml" -o -name "*.yml" | xargs yamllint -d relaxed
        
    - name: Validate Kubernetes manifests
      run: |
        # Install kubeval
        wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
        tar xf kubeval-linux-amd64.tar.gz
        sudo cp kubeval /usr/local/bin
        
        # Validate manifests
        find k8s/ -name "*.yaml" -exec kubeval {} \;

    - name: Security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'

  # =============================================================================
  # Build Job
  # =============================================================================
  build:
    runs-on: ubuntu-latest
    needs: test
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # =============================================================================
  # Deploy to Staging
  # =============================================================================
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/staging' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: 
      name: staging
      url: https://staging.your-domain.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBERNETES_VERSION }}

    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME_STAGING }}

    - name: Create namespace if not exists
      run: |
        kubectl create namespace erpnext-staging --dry-run=client -o yaml | kubectl apply -f -

    - name: Update image tags in manifests
      run: |
        # Replace placeholder image with actual built image
        sed -i "s|ghcr.io/your-org/erpnext:latest|${{ needs.build.outputs.image-tag }}|g" k8s/*.yaml
        
        # Update domain for staging
        sed -i "s|your-domain.com|staging.your-domain.com|g" k8s/ingress.yaml

    - name: Deploy database and redis
      run: |
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/secrets.yaml -n erpnext-staging
        kubectl apply -f k8s/configmap.yaml -n erpnext-staging
        kubectl apply -f k8s/mariadb-deployment.yaml -n erpnext-staging
        kubectl apply -f k8s/redis-deployment.yaml -n erpnext-staging
        
        # Wait for database to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/mariadb -n erpnext-staging
        kubectl wait --for=condition=available --timeout=300s deployment/redis -n erpnext-staging

    - name: Deploy ERPNext application
      run: |
        kubectl apply -f k8s/erpnext-deployment.yaml -n erpnext-staging
        kubectl apply -f k8s/erpnext-service.yaml -n erpnext-staging
        kubectl apply -f k8s/ingress.yaml -n erpnext-staging
        kubectl apply -f k8s/hpa.yaml -n erpnext-staging

    - name:
